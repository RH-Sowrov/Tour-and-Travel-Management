// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Tour_Travel.Data;

#nullable disable

namespace Tour_Travel.Migrations
{
    [DbContext(typeof(TourDbContext))]
    [Migration("20240423043858_ScriptISLAM")]
    partial class ScriptISLAM
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Tour_Travel.Models.Admin", b =>
                {
                    b.Property<int>("AdminId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AdminId"));

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("AdminId");

                    b.ToTable("Admins");
                });

            modelBuilder.Entity("Tour_Travel.Models.Booking", b =>
                {
                    b.Property<int>("BookingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookingId"));

                    b.Property<DateTime>("BookingDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PromotionId")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("BookingId");

                    b.HasIndex("PromotionId");

                    b.HasIndex("UserId");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("Tour_Travel.Models.Flight", b =>
                {
                    b.Property<int>("FlightId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FlightId"));

                    b.Property<string>("Airline")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("ArrivalDateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("AvailableSeats")
                        .HasColumnType("int");

                    b.Property<string>("DepartureAirport")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("DepartureDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DestinationAirport")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FlightNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("PricePerSeat")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<int>("PromotionId")
                        .HasColumnType("int");

                    b.HasKey("FlightId");

                    b.HasIndex("PromotionId");

                    b.ToTable("Flights");
                });

            modelBuilder.Entity("Tour_Travel.Models.FlightAvalability", b =>
                {
                    b.Property<int>("FlightAvalabilityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FlightAvalabilityId"));

                    b.Property<int>("AvailableSeats")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("FlightId")
                        .HasColumnType("int");

                    b.HasKey("FlightAvalabilityId");

                    b.HasIndex("FlightId");

                    b.ToTable("FlightAvalabilities");
                });

            modelBuilder.Entity("Tour_Travel.Models.FlightBooking", b =>
                {
                    b.Property<int>("FlightBookingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FlightBookingId"));

                    b.Property<int>("BookingId")
                        .HasColumnType("int");

                    b.Property<int>("FlightId")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfPassengers")
                        .HasColumnType("int");

                    b.Property<bool>("Return")
                        .HasColumnType("bit");

                    b.HasKey("FlightBookingId");

                    b.HasIndex("BookingId");

                    b.HasIndex("FlightId");

                    b.ToTable("FlightBookings");
                });

            modelBuilder.Entity("Tour_Travel.Models.FlightCancellation", b =>
                {
                    b.Property<int>("FlightCancellationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FlightCancellationId"));

                    b.Property<DateTime>("CancellationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("FlightBookingId")
                        .HasColumnType("int");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("FlightCancellationId");

                    b.HasIndex("FlightBookingId");

                    b.ToTable("FlightCancellations");
                });

            modelBuilder.Entity("Tour_Travel.Models.FlightSeatReservation", b =>
                {
                    b.Property<int>("FlightSeatReservationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FlightSeatReservationId"));

                    b.Property<int>("FlightBookingId")
                        .HasColumnType("int");

                    b.Property<string>("PassengerName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SeatNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("FlightSeatReservationId");

                    b.HasIndex("FlightBookingId");

                    b.ToTable("FlightSeatReservations");
                });

            modelBuilder.Entity("Tour_Travel.Models.Payment", b =>
                {
                    b.Property<int>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentId"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<int>("BookingId")
                        .HasColumnType("int");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("PaymentId");

                    b.HasIndex("BookingId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("Tour_Travel.Models.Promotion", b =>
                {
                    b.Property<int>("PromotionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PromotionId"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(5, 2)");

                    b.HasKey("PromotionId");

                    b.ToTable("Promotions");
                });

            modelBuilder.Entity("Tour_Travel.Models.Refund", b =>
                {
                    b.Property<int>("RefundId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RefundId"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<int>("BookingId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RefundDate")
                        .HasColumnType("datetime2");

                    b.HasKey("RefundId");

                    b.HasIndex("BookingId");

                    b.ToTable("Refunds");
                });

            modelBuilder.Entity("Tour_Travel.Models.Review", b =>
                {
                    b.Property<int>("Reviewid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Reviewid"));

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReviewDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Reviewid");

                    b.HasIndex("UserId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("Tour_Travel.Models.Tour", b =>
                {
                    b.Property<int>("TourId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TourId"));

                    b.Property<DateTime>("ArrivalTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DepartureTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Destination")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<int>("PromotionId")
                        .HasColumnType("int");

                    b.Property<string>("TourName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("TourPackageId")
                        .HasColumnType("int");

                    b.HasKey("TourId");

                    b.HasIndex("PromotionId");

                    b.HasIndex("TourPackageId");

                    b.ToTable("Tours");
                });

            modelBuilder.Entity("Tour_Travel.Models.TourAvailability", b =>
                {
                    b.Property<int>("TourAvailabilityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TourAvailabilityId"));

                    b.Property<int>("AvailableSlots")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("TourId")
                        .HasColumnType("int");

                    b.HasKey("TourAvailabilityId");

                    b.HasIndex("TourId");

                    b.ToTable("TourAvailabilities");
                });

            modelBuilder.Entity("Tour_Travel.Models.TourBooking", b =>
                {
                    b.Property<int>("TourBookingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TourBookingId"));

                    b.Property<int>("BookingId")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfPersons")
                        .HasColumnType("int");

                    b.Property<int>("TourId")
                        .HasColumnType("int");

                    b.HasKey("TourBookingId");

                    b.HasIndex("BookingId");

                    b.HasIndex("TourId");

                    b.ToTable("TourBookings");
                });

            modelBuilder.Entity("Tour_Travel.Models.TourCancellation", b =>
                {
                    b.Property<int>("TourCancellationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TourCancellationId"));

                    b.Property<DateTime>("CancellationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("TourBookingId")
                        .HasColumnType("int");

                    b.HasKey("TourCancellationId");

                    b.HasIndex("TourBookingId");

                    b.ToTable("TourCancellations");
                });

            modelBuilder.Entity("Tour_Travel.Models.TourFood", b =>
                {
                    b.Property<int>("TourFoodId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TourFoodId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("TourFoodId");

                    b.ToTable("TourFoods");
                });

            modelBuilder.Entity("Tour_Travel.Models.TourGuide", b =>
                {
                    b.Property<int>("TourGuideId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TourGuideId"));

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("Gender")
                        .HasColumnType("bit");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("TourGuideId");

                    b.ToTable("TourGuides");
                });

            modelBuilder.Entity("Tour_Travel.Models.TourHotel", b =>
                {
                    b.Property<int>("TourHotelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TourHotelId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("HotelName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("PricePerNight")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<decimal>("Rating")
                        .HasColumnType("decimal(3, 2)");

                    b.HasKey("TourHotelId");

                    b.ToTable("TourHotels");
                });

            modelBuilder.Entity("Tour_Travel.Models.TourImage", b =>
                {
                    b.Property<int>("TourImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TourImageId"));

                    b.Property<string>("Picture")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TourId")
                        .HasColumnType("int");

                    b.HasKey("TourImageId");

                    b.HasIndex("TourId");

                    b.ToTable("TourImages");
                });

            modelBuilder.Entity("Tour_Travel.Models.TourPackage", b =>
                {
                    b.Property<int>("TourPackageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TourPackageId"));

                    b.Property<int>("TourFoodId")
                        .HasColumnType("int");

                    b.Property<int>("TourGuideId")
                        .HasColumnType("int");

                    b.Property<int>("TourHotelId")
                        .HasColumnType("int");

                    b.Property<int>("TourTransportId")
                        .HasColumnType("int");

                    b.HasKey("TourPackageId");

                    b.HasIndex("TourFoodId");

                    b.HasIndex("TourGuideId");

                    b.HasIndex("TourHotelId");

                    b.HasIndex("TourTransportId");

                    b.ToTable("TourPackages");
                });

            modelBuilder.Entity("Tour_Travel.Models.TourTransport", b =>
                {
                    b.Property<int>("TourTransportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TourTransportId"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("RentPerPerson")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<int>("TotalSeat")
                        .HasColumnType("int");

                    b.Property<string>("TourTransportName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("TourTransportId");

                    b.ToTable("TourTransports");
                });

            modelBuilder.Entity("Tour_Travel.Models.TransactionHistory", b =>
                {
                    b.Property<int>("TransactionHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TransactionHistoryId"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<int>("BookingId")
                        .HasColumnType("int");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("TransactionHistoryId");

                    b.HasIndex("BookingId");

                    b.HasIndex("UserId");

                    b.ToTable("TransactionHistories");
                });

            modelBuilder.Entity("Tour_Travel.Models.TravelDocument", b =>
                {
                    b.Property<int>("TravelDocumentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TravelDocumentId"));

                    b.Property<string>("DocumentNumber")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("DocumentType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("TravelDocumentId");

                    b.HasIndex("UserId");

                    b.ToTable("TravelDocuments");
                });

            modelBuilder.Entity("Tour_Travel.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ProfileImage")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Tour_Travel.Models.Booking", b =>
                {
                    b.HasOne("Tour_Travel.Models.Promotion", "Promotion")
                        .WithMany("Bookings")
                        .HasForeignKey("PromotionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tour_Travel.Models.User", "User")
                        .WithMany("Bookings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Promotion");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Tour_Travel.Models.Flight", b =>
                {
                    b.HasOne("Tour_Travel.Models.Promotion", "Promotion")
                        .WithMany("Flights")
                        .HasForeignKey("PromotionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Promotion");
                });

            modelBuilder.Entity("Tour_Travel.Models.FlightAvalability", b =>
                {
                    b.HasOne("Tour_Travel.Models.Flight", "Flight")
                        .WithMany("FlightAvalabilities")
                        .HasForeignKey("FlightId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Flight");
                });

            modelBuilder.Entity("Tour_Travel.Models.FlightBooking", b =>
                {
                    b.HasOne("Tour_Travel.Models.Booking", "Booking")
                        .WithMany("FlightBookings")
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tour_Travel.Models.Flight", "Flight")
                        .WithMany("FlightBookings")
                        .HasForeignKey("FlightId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Booking");

                    b.Navigation("Flight");
                });

            modelBuilder.Entity("Tour_Travel.Models.FlightCancellation", b =>
                {
                    b.HasOne("Tour_Travel.Models.FlightBooking", "FlightBooking")
                        .WithMany("FlightCancellations")
                        .HasForeignKey("FlightBookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FlightBooking");
                });

            modelBuilder.Entity("Tour_Travel.Models.FlightSeatReservation", b =>
                {
                    b.HasOne("Tour_Travel.Models.FlightBooking", "FlightBooking")
                        .WithMany("FlightSeatReservations")
                        .HasForeignKey("FlightBookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FlightBooking");
                });

            modelBuilder.Entity("Tour_Travel.Models.Payment", b =>
                {
                    b.HasOne("Tour_Travel.Models.Booking", "Booking")
                        .WithMany("Payments")
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Booking");
                });

            modelBuilder.Entity("Tour_Travel.Models.Refund", b =>
                {
                    b.HasOne("Tour_Travel.Models.Booking", "Booking")
                        .WithMany("Refunds")
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Booking");
                });

            modelBuilder.Entity("Tour_Travel.Models.Review", b =>
                {
                    b.HasOne("Tour_Travel.Models.User", "User")
                        .WithMany("Reviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Tour_Travel.Models.Tour", b =>
                {
                    b.HasOne("Tour_Travel.Models.Promotion", "Promotion")
                        .WithMany("Tours")
                        .HasForeignKey("PromotionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tour_Travel.Models.TourPackage", "TourPackage")
                        .WithMany("Tour")
                        .HasForeignKey("TourPackageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Promotion");

                    b.Navigation("TourPackage");
                });

            modelBuilder.Entity("Tour_Travel.Models.TourAvailability", b =>
                {
                    b.HasOne("Tour_Travel.Models.Tour", "Tour")
                        .WithMany("TourAvailabilities")
                        .HasForeignKey("TourId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tour");
                });

            modelBuilder.Entity("Tour_Travel.Models.TourBooking", b =>
                {
                    b.HasOne("Tour_Travel.Models.Booking", "Booking")
                        .WithMany("TourBookings")
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tour_Travel.Models.Tour", "Tour")
                        .WithMany("TourBooking")
                        .HasForeignKey("TourId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Booking");

                    b.Navigation("Tour");
                });

            modelBuilder.Entity("Tour_Travel.Models.TourCancellation", b =>
                {
                    b.HasOne("Tour_Travel.Models.TourBooking", "TourBooking")
                        .WithMany("TourCancellations")
                        .HasForeignKey("TourBookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TourBooking");
                });

            modelBuilder.Entity("Tour_Travel.Models.TourImage", b =>
                {
                    b.HasOne("Tour_Travel.Models.Tour", "Tour")
                        .WithMany("TourImage")
                        .HasForeignKey("TourId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tour");
                });

            modelBuilder.Entity("Tour_Travel.Models.TourPackage", b =>
                {
                    b.HasOne("Tour_Travel.Models.TourFood", "TourFood")
                        .WithMany("Packages")
                        .HasForeignKey("TourFoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tour_Travel.Models.TourGuide", "TourGuide")
                        .WithMany("Packages")
                        .HasForeignKey("TourGuideId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tour_Travel.Models.TourHotel", "TourHotel")
                        .WithMany("Packages")
                        .HasForeignKey("TourHotelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tour_Travel.Models.TourTransport", "TourTransport")
                        .WithMany("Packages")
                        .HasForeignKey("TourTransportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TourFood");

                    b.Navigation("TourGuide");

                    b.Navigation("TourHotel");

                    b.Navigation("TourTransport");
                });

            modelBuilder.Entity("Tour_Travel.Models.TransactionHistory", b =>
                {
                    b.HasOne("Tour_Travel.Models.Booking", "Booking")
                        .WithMany("TransactionHistories")
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tour_Travel.Models.User", "User")
                        .WithMany("TransactionHistories")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Booking");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Tour_Travel.Models.TravelDocument", b =>
                {
                    b.HasOne("Tour_Travel.Models.User", "User")
                        .WithMany("TravelDocuments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Tour_Travel.Models.Booking", b =>
                {
                    b.Navigation("FlightBookings");

                    b.Navigation("Payments");

                    b.Navigation("Refunds");

                    b.Navigation("TourBookings");

                    b.Navigation("TransactionHistories");
                });

            modelBuilder.Entity("Tour_Travel.Models.Flight", b =>
                {
                    b.Navigation("FlightAvalabilities");

                    b.Navigation("FlightBookings");
                });

            modelBuilder.Entity("Tour_Travel.Models.FlightBooking", b =>
                {
                    b.Navigation("FlightCancellations");

                    b.Navigation("FlightSeatReservations");
                });

            modelBuilder.Entity("Tour_Travel.Models.Promotion", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("Flights");

                    b.Navigation("Tours");
                });

            modelBuilder.Entity("Tour_Travel.Models.Tour", b =>
                {
                    b.Navigation("TourAvailabilities");

                    b.Navigation("TourBooking");

                    b.Navigation("TourImage");
                });

            modelBuilder.Entity("Tour_Travel.Models.TourBooking", b =>
                {
                    b.Navigation("TourCancellations");
                });

            modelBuilder.Entity("Tour_Travel.Models.TourFood", b =>
                {
                    b.Navigation("Packages");
                });

            modelBuilder.Entity("Tour_Travel.Models.TourGuide", b =>
                {
                    b.Navigation("Packages");
                });

            modelBuilder.Entity("Tour_Travel.Models.TourHotel", b =>
                {
                    b.Navigation("Packages");
                });

            modelBuilder.Entity("Tour_Travel.Models.TourPackage", b =>
                {
                    b.Navigation("Tour");
                });

            modelBuilder.Entity("Tour_Travel.Models.TourTransport", b =>
                {
                    b.Navigation("Packages");
                });

            modelBuilder.Entity("Tour_Travel.Models.User", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("Reviews");

                    b.Navigation("TransactionHistories");

                    b.Navigation("TravelDocuments");
                });
#pragma warning restore 612, 618
        }
    }
}
